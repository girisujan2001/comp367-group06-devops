trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

stages:
  - stage: Build
    jobs:
      - job: BuildJob
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'

          # Backend steps
          - script: |
              cd backend
              npm install
              npm run lint || echo "No lint errors found"
            displayName: 'Backend: Install & Lint'

          - script: |
              cd backend
              npm run build || echo "Backend build completed (no output files)"
            displayName: 'Backend: Build'

          # Frontend steps
          - script: |
              cd frontend
              npm install
              npm run lint || echo "No lint errors found"
            displayName: 'Frontend: Install & Lint'

          - script: |
              cd frontend
              npm run build
            displayName: 'Frontend: Build'

          # Verify build outputs
          - powershell: |
              Write-Host "Checking build outputs..."
              $backendFiles = Get-ChildItem -Path "backend/dist" -ErrorAction SilentlyContinue
              $frontendFiles = Get-ChildItem -Path "frontend/build" -Recurse -ErrorAction SilentlyContinue
              
              if ($backendFiles) {
                  Write-Host "Backend build outputs found:"
                  $backendFiles | ForEach-Object { Write-Host $_.FullName }
              } else {
                  Write-Host "No backend build outputs found"
              }
              
              if ($frontendFiles) {
                  Write-Host "Frontend build outputs found:"
                  $frontendFiles | ForEach-Object { Write-Host $_.FullName }
              } else {
                  Write-Host "No frontend build outputs found"
              }
            displayName: 'Verify Build Outputs'

          # Copy artifacts (Windows compatible)
          - powershell: |
              # Create target directories
              New-Item -ItemType Directory -Path "$(Build.ArtifactStagingDirectory)/backend" -Force
              New-Item -ItemType Directory -Path "$(Build.ArtifactStagingDirectory)/frontend" -Force
              
              # Copy backend files if they exist
              if (Test-Path "backend/dist") {
                  Copy-Item -Path "backend/dist/*" -Destination "$(Build.ArtifactStagingDirectory)/backend/" -Recurse -Force
              }
              
              # Copy frontend files if they exist
              if (Test-Path "frontend/build") {
                  Copy-Item -Path "frontend/build/*" -Destination "$(Build.ArtifactStagingDirectory)/frontend/" -Recurse -Force
              }
            displayName: 'Copy Build Outputs'

          # Publish artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'comp367-devops-project'
              publishLocation: 'Container'
            displayName: 'Publish Artifacts'

  - stage: Test
    jobs:
      - job: TestJob
        steps:
          - script: echo "Running tests would happen here"
            displayName: 'Run Tests'

  - stage: DeployToDev
    jobs:
      - job: DevDeploy
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              artifactName: 'comp367-devops-project'
              downloadPath: '$(Pipeline.Workspace)'
            displayName: 'Download Artifacts'
            
          - script: echo "Deploying to Dev environment..."
            displayName: 'Mock Deploy to Dev'
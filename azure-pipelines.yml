trigger:
  branches:
    include:
      - main

pool:
  name: Default  # Using your specified Windows agent pool
  vmImage: 'windows-latest'  # Explicit Windows image for reliability

variables:
  buildConfiguration: "Release"

stages:
  - stage: Build
    jobs:
      - job: BuildJob
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
            displayName: 'Install Node.js'

          # Backend steps
          - script: |
              cd backend
              npm install
              npm run lint || echo "No lint errors"
            displayName: "Backend: Install & Lint"

          - script: |
              cd backend
              npm run build || echo "Backend build completed (no output files)"
            displayName: "Backend: Build"

          # Frontend steps (corrected for React structure)
          - script: |
              cd frontend
              npm install
              npm run lint || echo "No lint errors"
            displayName: "Frontend: Install & Lint"

          - script: |
              cd frontend
              npm run build
            displayName: "Frontend: Build"

          # Verify build outputs (Windows compatible)
          - script: |
              echo "Checking backend outputs:"
              dir "backend\dist" || echo "No backend dist found"
              echo "Checking frontend outputs:"
              dir "frontend\build" || echo "No frontend build found"
            displayName: "Verify Build Outputs"

          # Robust Windows copy commands
          - script: |
              mkdir "%BUILD_ARTIFACTSTAGINGDIRECTORY%\backend" 2>nul
              mkdir "%BUILD_ARTIFACTSTAGINGDIRECTORY%\frontend" 2>nul
              
              if exist "backend\dist\*" (
                xcopy /s /y /i "backend\dist" "%BUILD_ARTIFACTSTAGINGDIRECTORY%\backend\"
              ) else (
                echo "No backend files to copy"
              )
              
              if exist "frontend\build\*" (
                xcopy /s /y /i "frontend\build" "%BUILD_ARTIFACTSTAGINGDIRECTORY%\frontend\"
              ) else (
                echo "No frontend files to copy"
              )
            displayName: "Copy Build Outputs"
            failOnStderr: false

          # Verify copied artifacts
          - script: |
              echo "Copied artifacts:"
              dir /s "%BUILD_ARTIFACTSTAGINGDIRECTORY%"
            displayName: "Verify Artifacts"

          # Publish artifacts
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: $(Build.ArtifactStagingDirectory)
              ArtifactName: 'comp367-devops-project'
              publishLocation: 'Container'
            displayName: 'Publish Artifacts'

  - stage: Test
    jobs:
      - job: TestJob
        steps:
          - script: |
              echo "No tests to run"
            displayName: "Run Tests"

  - stage: Deliver
    jobs:
      - job: Package
        steps:
          - script: |
              echo "Artifacts would be packaged here"
            displayName: "Mock Package"

  - stage: DeployToDev
    jobs:
      - job: DevDeploy
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              artifactName: 'comp367-devops-project'
              downloadPath: '$(Pipeline.Workspace)'
            displayName: 'Download Artifacts'
            
          - script: |
              echo "Deploying backend and frontend to Dev"
              echo "Backend content:"
              dir "$(Pipeline.Workspace)\comp367-devops-project\backend"
              echo "Frontend content:"
              dir "$(Pipeline.Workspace)\comp367-devops-project\frontend"
            displayName: "Verify Deployment Artifacts"

          - script: |
              echo "Mock Deploy to Dev Environment"
            displayName: "Mock Deploy to Dev"

  - stage: DeployToQAT
    jobs:
      - job: QATDeploy
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              artifactName: 'comp367-devops-project'
              downloadPath: '$(Pipeline.Workspace)'
            displayName: 'Download Artifacts for QAT'
            
          - script: |
              echo "Mock Deploy to QAT Environment"
            displayName: "Mock Deploy to QAT"

  - stage: DeployToStaging
    jobs:
      - job: Staging
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              artifactName: 'comp367-devops-project'
              downloadPath: '$(Pipeline.Workspace)'
            displayName: 'Download Artifacts for Staging'
            
          - script: |
              echo "Mock Deploy to Staging Environment"
            displayName: "Mock Deploy to Staging"

  - stage: DeployToProd
    jobs:
      - job: Prod
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              artifactName: 'comp367-devops-project'
              downloadPath: '$(Pipeline.Workspace)'
            displayName: 'Download Artifacts for Prod'
            
          - script: |
              echo "Mock Deploy to Production Environment"
            displayName: "Mock Deploy to Prod"